pool:
  vmImage: 'windows-2019'
  name: Azure Pipelines
  demands:
  - msbuild
  - visualstudio

variables:
  system.debug: false
  # system.debug: System variable that can be set by the users. Set this to true to run the release in debug mode to assist in fault-finding.
  # BuildConfiguration: Build configuration such as Debug or Release.
  # BuildPlatform: Build platform such as Win32, x86, x64 or any cpu.
  # AppId: Microsoft App Id of the bot
  # AppPassword: Microsoft App Password of the bot
  # BotName: Name of the bot
  # Location: Location of the bot
  # LuisAuthoringRegion: Location of the LUIS apps
  # PreviewVersion: Version of the SDK's packages that the bot will use
  # ServicePrincipal: App Id of the Service Principal
  # Azure_Tenant: Tenant's value of your Azure directory
  # AzureDevOps-ServicePrincipal-Secret: Secret of the Service Principal
  # AzureSubscription: Your Azure subscription

jobs:
- job: Main
  timeoutInMinutes: 0
  steps:
  - task: NodeTool@0
    displayName: 'Prepare: Use Node 10.16.3'
    inputs:
      versionSpec: 10.16.3

  - pwsh: |
     # Install botbuilder tools off MyGet
     npm config set registry https://botbuilder.myget.org/F/botbuilder-tools-daily/npm/

     npm i -g botdispatch luis-apis botskills
    displayName: 'Prepare: Install preview dispatch, luis-apis, botskills'

  - pwsh: |
     # Create config file
     $path = Join-Path $env:LOCALAPPDATA "@microsoft" "botframework-cli"

     New-Item -Path $path -ItemType Directory

     $config = @{
         telemetry = $true
     }

     $config | ConvertTo-Json -depth 100 | Out-File $(Join-Path $path "config.json")

     # Install botframework-cli off MyGet
     npm config set registry https://botbuilder.myget.org/F/botframework-cli/npm/

     npm i -g @microsoft/botframework-cli
    displayName: 'Prepare: Install preview botframework-cli'

  - pwsh: |
     # Install generator-bot-virtualassistant from MyGet
     npm config set registry https://botbuilder.myget.org/F/aitemplates/npm/

     npm install -g yo generator-bot-virtualassistant

    displayName: 'Prepare: Install yeoman, generator-bot-virtualassistant'

  - powershell: 'yo bot-virtualassistant:skill -n $(BotName) -d "" -l "en-us,es-es,it-it,fr-fr,de-de,zh-cn" -p "$(System.DefaultWorkingDirectory)/templates/typescript/samples/functionalTests" --noPrompt'
    displayName: 'Prepare: Create a Skill using the generator'

  - task: knom.regexreplace-task.regex-replace.RegexReplace@3
    displayName: 'Prepare: Update SDK to latest preview version'
    inputs:
      InputSearchPattern: 'templates/typescript/samples/functionalTests/$(BotName)/package.json'
      FindRegex: '("(\bbotbuilder[^:]*(?:-[^:]*)?)|"(\bbotframework(?:-[^:]*))):\s(".*")'
      ReplaceRegex: '$1:$(PreviewVersion)'

  - pwsh: |
     Write-Host "CLI versions in use for this Nightly Build"

     Write-Host "BF CLI"
     Write-Host "===="
     bf -v

     Write-Host "LUIS CLI"
     Write-Host "===="
     luis -v

     Write-Host "Dispatch CLI"
     Write-Host "===="
     dispatch -v

     Write-Host "BotSkills CLI"
     Write-Host "===="
     botskills -v

     Write-Host "BF SDK and Solutions package versions being used by the Skill Sample for this nightly build"
     Write-Host "===="

     $path = '$(System.DefaultWorkingDirectory)\templates\typescript\samples\functionalTests\$(BotName)\package-lock.json'

     $json = Get-Content $path | Out-String | ConvertFrom-Json

     Write-Host "bot-solutions Version"
     Write-Host "===="
     $botsolutionsVersion = $json.dependencies.'bot-solutions'.version

     Write-Host $botsolutionsVersion


     Write-Host "botbuilder Version"
     Write-Host "===="
     $botbuilderVersion = $json.dependencies.botbuilder.version

     Write-Host $botbuilderVersion


     Write-Host "botbuilder-ai Version"
     Write-Host "===="
     $botbuilderaiVersion = $json.dependencies.'botbuilder-ai'.version

     Write-Host $botbuilderaiVersion


     Write-Host "botbuilder-applicationinsights Version"
     Write-Host "===="
     $botbuilderapplicationinsights = $json.dependencies.'botbuilder-applicationinsights'.version

     Write-Host $botbuilderapplicationinsights


     Write-Host "botbuilder-azure Version"
     Write-Host "===="
     $botbuilderazure = $json.dependencies.'botbuilder-azure'.version

     Write-Host $botbuilderazure


     Write-Host "botbuilder-dialogs Version"
     Write-Host "===="
     $botbuilderdialogs = $json.dependencies.'botbuilder-dialogs'.version

     Write-Host $botbuilderdialogs


     Write-Host "botbuilder-lg Version"
     Write-Host "===="
     $botbuilderlg = $json.dependencies.'botbuilder-lg'.version

     Write-Host $botbuilderlg


     Write-Host "botframework-config Version"
     Write-Host "===="
     $botframeworkconfig = $json.dependencies.'botframework-config'.version

     Write-Host $botframeworkconfig



     Write-Host "botframework-connector Version"
     Write-Host "===="
     $botframeworkconnector = $json.dependencies.'botframework-connector'.version

     Write-Host $botframeworkconnector



     Write-Host "botframework-schema Version"
     Write-Host "===="
     $botframeworkschema = $json.dependencies.'botframework-schema'.version

     Write-Host $botframeworkschema



     Write-Host "botframework-streaming Version"
     Write-Host "===="
     $botframeworkstreaming = $json.dependencies.'botframework-streaming'.version

     Write-Host $botframeworkstreaming



     Write-Host "generator-bot-virtualassistant Version"
     Write-Host "===="
     npm view generator-bot-virtualassistant version --silent
    displayName: 'Prepare: Log CLI and BF SDK Versions to highlight what is being used copy'

  - task: Npm@1
    displayName: 'Build: Run npm install'
    inputs:
      workingDir: 'templates/typescript/samples/functionalTests/$(BotName)'
      verbose: false

  - task: Npm@1
    displayName: 'Build: Run npm build'
    inputs:
      command: custom
      workingDir: 'templates/typescript/samples/functionalTests/$(BotName)'
      verbose: false
      customCommand: 'run build'

  - task: Npm@1
    displayName: 'Build: Run npm test'
    inputs:
      command: custom
      workingDir: 'templates/typescript/samples/functionalTests/$(BotName)'
      verbose: false
      customCommand: 'run test'

  - task: Npm@1
    displayName: 'Build: Run npm test on unit tests with code'
    inputs:
      command: custom
      workingDir: 'templates/typescript/samples/functionalTests/$(BotName)'
      verbose: false
      customCommand: 'run test-coverage-ci'

  - task: PublishTestResults@2
    displayName: 'Build: Publish Test Results'
    inputs:
      testResultsFiles: 'test-results.xml'
      searchFolder: 'templates/typescript/samples/functionalTests/$(BotName)'
      failTaskOnFailedTests: true

  - task: PublishCodeCoverageResults@1
    displayName: 'Build: Publish Code Coverage'
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: 'templates/typescript/samples/functionalTests/$(BotName)/coverage/cobertura-coverage.xml'
      reportDirectory: 'templates/typescript/samples/functionalTests/$(BotName)/coverage/'

  - task: AzureCLI@2
    displayName: 'Deploy: Delete test resource group if it exists'
    inputs:
      azureSubscription: $(AzureSubscription)
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
       # If RG exists, delete it to avoid possible App ID registration conflict.
       $exists = az group exists --name $(BotName)

       if ($exists -eq 'true')
       {
           Write-Host "Resource group $(BotName) exists, there is likely an error on the previous build. Deleting."
            az group delete --name $(BotName) --yes
       }
       else
       {
           Write-Host "Resource group $(BotName) does not exist."
       }
      workingDirectory: 'templates/typescript/samples/functionalTests/$(BotName)'

  - pwsh: |
     Invoke-WebRequest -Uri https://aka.ms/installazurecliwindows -OutFile .\AzureCLI.msi; Start-Process msiexec.exe -Wait -ArgumentList '/I AzureCLI.msi /quiet'

     az login --service-principal --username "$(ServicePrincipal)" --password "$(AzureDevOps-ServicePrincipal-Secret)" --tenant "$(Azure_Tenant)"

     ./deployment/scripts/deploy.ps1 -name $(BotName)  -location $(Location) -languages "en-us,es-es,it-it,fr-fr,de-de,zh-cn" -appId $(AppId) -appPassword $(AppPassword) -createLuisAuthoring -luisAuthoringRegion $(LuisAuthoringRegion) -logFolder "deployment" -luisEndpoint "https://westus.api.cognitive.microsoft.com/luis/api/v2.0"
    errorActionPreference: continue
    workingDirectory: 'templates/typescript/samples/functionalTests/$(BotName)'
    displayName: 'Deploy: Run deploy script'
    continueOnError: true

  - pwsh: |
     $appsettings = Get-Content -Path "appsettings.json" | Out-String | ConvertFrom-Json

     Write-Host $appSettings

     $botWebAppName = $appsettings.botWebAppName
     $resourceGroupName= $appsettings.resourceGroupName

     Write-Host $botWebAppName
     echo "##vso[task.setvariable variable=BOTWEBAPPNAME;]$botWebAppName"

     Write-Host $resourceGroupName
     echo "##vso[task.setvariable variable=BOTRESOURCEGROUP;]$resourceGroupName"
    workingDirectory: 'templates/typescript/samples/functionalTests/$(BotName)/src'
    displayName: 'Deploy: Get bot variables from appsettings'

  - task: AzureCLI@1
    displayName: 'Deploy: Create Direct Line channel registration'
    inputs:
      azureSubscription: $(AzureSubscription)
      scriptLocation: inlineScript
      inlineScript: 'call az bot directline create -n "$(BOTWEBAPPNAME)" -g "$(BOTRESOURCEGROUP)" --verbose --debug --output json > "DirectLineCreate.json"'
      workingDirectory: 'templates/typescript/samples/functionalTests/$(BotName)'

  - powershell: |
     $botName = "$(BOTWEBAPPNAME)"
     Write-Host "DirectLine Bot Name: $botName"

     $json = Get-Content "DirectLineCreate.json" | Out-String | ConvertFrom-Json
     $key = $json.properties.properties.sites.key

     echo "##vso[task.setvariable variable=DIRECTLINE;]$key"
     echo "##vso[task.setvariable variable=BOTID;]$botName"

     Write-Host "DirectLine Key: $key"
    workingDirectory: 'templates/typescript/samples/functionalTests/$(BotName)'
    displayName: 'Deploy: Get channel secrets'

  - task: DotNetCoreCLI@2
    displayName: 'Test: Run dotnet restore'
    inputs:
      command: restore
      projects: 'templates/typescript/samples/sample-skill/functional-tests/SkillSample.FunctionalTests/SkillSample.FunctionalTests.csproj'


  - task: DotNetCoreCLI@2
    displayName: 'Test: Run dotnet build'
    inputs:
      projects: 'templates/typescript/samples/sample-skill/functional-tests/SkillSample.FunctionalTests/SkillSample.FunctionalTests.csproj'

  - task: DotNetCoreCLI@2
    displayName: 'Test: Run dotnet test on functional tests'
    inputs:
      command: test
      projects: 'templates/typescript/samples/sample-skill/functional-tests/SkillSample.FunctionalTests/SkillSample.FunctionalTests.csproj'
      arguments: '--configuration $(BuildConfiguration) --filter TestCategory=FunctionalTests'
      publishTestResults: false

  - task: AzureCLI@1
    displayName: 'Cleanup: Delete bot resources'
    inputs:
      azureSubscription: $(AzureSubscription)
      scriptLocation: inlineScript
      inlineScript: 'az group delete -g $(BotName) --no-wait --yes'

  - pwsh: |
     Write-Host "Deploy log"
     Get-Content -Path $(Join-Path "deployment" "deploy_log.txt")
     Write-Host "Deploy cognitive models log"
     Get-Content -Path $(Join-Path "deployment" "deploy_cognitive_models_log.txt")
     Write-Host "Deploy cognitive models log"
     Get-Content -Path $(Join-Path "deployment" "publish_log.txt")
    errorActionPreference: continue
    workingDirectory: 'templates/typescript/samples/functionalTests/$(BotName)'
    displayName: 'Debug: Show log contents'
    condition: always()

  - script: 'dir ..\*.* /s'
    displayName: 'Debug: dir workspace'
    continueOnError: true
    condition: always()
