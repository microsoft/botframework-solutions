/*
 * Microsoft Bot Connector API - v3.0
 * The Bot Connector REST API allows your bot to send and receive messages to channels configured in the  [Bot Framework Developer Portal](https://dev.botframework.com). The Connector service uses industry-standard REST  and JSON over HTTPS.    Client libraries for this REST API are available. See below for a list.    Many bots will use both the Bot Connector REST API and the associated [Bot State REST API](/en-us/restapi/state). The  Bot State REST API allows a bot to store and retrieve state associated with users and conversations.    Authentication for both the Bot Connector and Bot State REST APIs is accomplished with JWT Bearer tokens, and is  described in detail in the [Connector Authentication](/en-us/restapi/authentication) document.    # Client Libraries for the Bot Connector REST API    * [Bot Builder for C#](/en-us/csharp/builder/sdkreference/)  * [Bot Builder for Node.js](/en-us/node/builder/overview/)  * Generate your own from the [Connector API Swagger file](https://raw.githubusercontent.com/Microsoft/BotBuilder/master/CSharp/Library/Microsoft.Bot.Connector.Shared/Swagger/ConnectorAPI.json)    ï¿½ 2016 Microsoft
 *
 * OpenAPI spec version: v3
 * Contact: botframework@microsoft.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package client.model;

import com.google.gson.annotations.SerializedName;

import java.util.Objects;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * Refers to a substring of content within another field
 */
@ApiModel(description = "Refers to a substring of content within another field")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-08-29T10:06:15.114-07:00")
public class TextHighlight {
  @SerializedName("text")
  private String text = null;

  @SerializedName("occurrence")
  private Integer occurrence = null;

  public TextHighlight text(String text) {
    this.text = text;
    return this;
  }

   /**
   * Defines the snippet of text to highlight
   * @return text
  **/
  @ApiModelProperty(value = "Defines the snippet of text to highlight")
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }

  public TextHighlight occurrence(Integer occurrence) {
    this.occurrence = occurrence;
    return this;
  }

   /**
   * Occurrence of the text field within the referenced text, if multiple exist.
   * @return occurrence
  **/
  @ApiModelProperty(value = "Occurrence of the text field within the referenced text, if multiple exist.")
  public Integer getOccurrence() {
    return occurrence;
  }

  public void setOccurrence(Integer occurrence) {
    this.occurrence = occurrence;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TextHighlight textHighlight = (TextHighlight) o;
    return Objects.equals(this.text, textHighlight.text) &&
        Objects.equals(this.occurrence, textHighlight.occurrence);
  }

  @Override
  public int hashCode() {
    return Objects.hash(text, occurrence);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TextHighlight {\n");

    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    occurrence: ").append(toIndentedString(occurrence)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

