/*
 * Microsoft Bot Connector API - v3.0
 * The Bot Connector REST API allows your bot to send and receive messages to channels configured in the  [Bot Framework Developer Portal](https://dev.botframework.com). The Connector service uses industry-standard REST  and JSON over HTTPS.    Client libraries for this REST API are available. See below for a list.    Many bots will use both the Bot Connector REST API and the associated [Bot State REST API](/en-us/restapi/state). The  Bot State REST API allows a bot to store and retrieve state associated with users and conversations.    Authentication for both the Bot Connector and Bot State REST APIs is accomplished with JWT Bearer tokens, and is  described in detail in the [Connector Authentication](/en-us/restapi/authentication) document.    # Client Libraries for the Bot Connector REST API    * [Bot Builder for C#](/en-us/csharp/builder/sdkreference/)  * [Bot Builder for Node.js](/en-us/node/builder/overview/)  * Generate your own from the [Connector API Swagger file](https://raw.githubusercontent.com/Microsoft/BotBuilder/master/CSharp/Library/Microsoft.Bot.Connector.Shared/Swagger/ConnectorAPI.json)    ï¿½ 2016 Microsoft
 *
 * OpenAPI spec version: v3
 * Contact: botframework@microsoft.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package client.model;

import com.google.gson.annotations.SerializedName;

import java.util.Objects;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * Supplies monetary amounts
 */
@ApiModel(description = "Supplies monetary amounts")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-08-29T10:06:15.114-07:00")
public class PaymentCurrencyAmount {
  @SerializedName("currency")
  private String currency = null;

  @SerializedName("value")
  private String value = null;

  @SerializedName("currencySystem")
  private String currencySystem = null;

  public PaymentCurrencyAmount currency(String currency) {
    this.currency = currency;
    return this;
  }

   /**
   * A currency identifier
   * @return currency
  **/
  @ApiModelProperty(value = "A currency identifier")
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }

  public PaymentCurrencyAmount value(String value) {
    this.value = value;
    return this;
  }

   /**
   * Decimal monetary value
   * @return value
  **/
  @ApiModelProperty(value = "Decimal monetary value")
  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }

  public PaymentCurrencyAmount currencySystem(String currencySystem) {
    this.currencySystem = currencySystem;
    return this;
  }

   /**
   * Currency system
   * @return currencySystem
  **/
  @ApiModelProperty(value = "Currency system")
  public String getCurrencySystem() {
    return currencySystem;
  }

  public void setCurrencySystem(String currencySystem) {
    this.currencySystem = currencySystem;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentCurrencyAmount paymentCurrencyAmount = (PaymentCurrencyAmount) o;
    return Objects.equals(this.currency, paymentCurrencyAmount.currency) &&
        Objects.equals(this.value, paymentCurrencyAmount.value) &&
        Objects.equals(this.currencySystem, paymentCurrencyAmount.currencySystem);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currency, value, currencySystem);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentCurrencyAmount {\n");

    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    currencySystem: ").append(toIndentedString(currencySystem)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

