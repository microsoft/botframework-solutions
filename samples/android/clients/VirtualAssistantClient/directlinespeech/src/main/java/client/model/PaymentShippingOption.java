/*
 * Microsoft Bot Connector API - v3.0
 * The Bot Connector REST API allows your bot to send and receive messages to channels configured in the  [Bot Framework Developer Portal](https://dev.botframework.com). The Connector service uses industry-standard REST  and JSON over HTTPS.    Client libraries for this REST API are available. See below for a list.    Many bots will use both the Bot Connector REST API and the associated [Bot State REST API](/en-us/restapi/state). The  Bot State REST API allows a bot to store and retrieve state associated with users and conversations.    Authentication for both the Bot Connector and Bot State REST APIs is accomplished with JWT Bearer tokens, and is  described in detail in the [Connector Authentication](/en-us/restapi/authentication) document.    # Client Libraries for the Bot Connector REST API    * [Bot Builder for C#](/en-us/csharp/builder/sdkreference/)  * [Bot Builder for Node.js](/en-us/node/builder/overview/)  * Generate your own from the [Connector API Swagger file](https://raw.githubusercontent.com/Microsoft/BotBuilder/master/CSharp/Library/Microsoft.Bot.Connector.Shared/Swagger/ConnectorAPI.json)    ï¿½ 2016 Microsoft
 *
 * OpenAPI spec version: v3
 * Contact: botframework@microsoft.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package client.model;

import com.google.gson.annotations.SerializedName;

import java.util.Objects;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * Describes a shipping option
 */
@ApiModel(description = "Describes a shipping option")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-08-29T10:06:15.114-07:00")
public class PaymentShippingOption {
  @SerializedName("id")
  private String id = null;

  @SerializedName("label")
  private String label = null;

  @SerializedName("amount")
  private PaymentCurrencyAmount amount = null;

  @SerializedName("selected")
  private Boolean selected = null;

  public PaymentShippingOption id(String id) {
    this.id = id;
    return this;
  }

   /**
   * String identifier used to reference this PaymentShippingOption
   * @return id
  **/
  @ApiModelProperty(value = "String identifier used to reference this PaymentShippingOption")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public PaymentShippingOption label(String label) {
    this.label = label;
    return this;
  }

   /**
   * Human-readable description of the item
   * @return label
  **/
  @ApiModelProperty(value = "Human-readable description of the item")
  public String getLabel() {
    return label;
  }

  public void setLabel(String label) {
    this.label = label;
  }

  public PaymentShippingOption amount(PaymentCurrencyAmount amount) {
    this.amount = amount;
    return this;
  }

   /**
   * Contains the monetary amount for the item
   * @return amount
  **/
  @ApiModelProperty(value = "Contains the monetary amount for the item")
  public PaymentCurrencyAmount getAmount() {
    return amount;
  }

  public void setAmount(PaymentCurrencyAmount amount) {
    this.amount = amount;
  }

  public PaymentShippingOption selected(Boolean selected) {
    this.selected = selected;
    return this;
  }

   /**
   * Indicates whether this is the default selected PaymentShippingOption
   * @return selected
  **/
  @ApiModelProperty(value = "Indicates whether this is the default selected PaymentShippingOption")
  public Boolean isSelected() {
    return selected;
  }

  public void setSelected(Boolean selected) {
    this.selected = selected;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentShippingOption paymentShippingOption = (PaymentShippingOption) o;
    return Objects.equals(this.id, paymentShippingOption.id) &&
        Objects.equals(this.label, paymentShippingOption.label) &&
        Objects.equals(this.amount, paymentShippingOption.amount) &&
        Objects.equals(this.selected, paymentShippingOption.selected);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, label, amount, selected);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentShippingOption {\n");

    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    selected: ").append(toIndentedString(selected)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

