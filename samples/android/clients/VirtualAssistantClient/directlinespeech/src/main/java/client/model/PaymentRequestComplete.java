/*
 * Microsoft Bot Connector API - v3.0
 * The Bot Connector REST API allows your bot to send and receive messages to channels configured in the  [Bot Framework Developer Portal](https://dev.botframework.com). The Connector service uses industry-standard REST  and JSON over HTTPS.    Client libraries for this REST API are available. See below for a list.    Many bots will use both the Bot Connector REST API and the associated [Bot State REST API](/en-us/restapi/state). The  Bot State REST API allows a bot to store and retrieve state associated with users and conversations.    Authentication for both the Bot Connector and Bot State REST APIs is accomplished with JWT Bearer tokens, and is  described in detail in the [Connector Authentication](/en-us/restapi/authentication) document.    # Client Libraries for the Bot Connector REST API    * [Bot Builder for C#](/en-us/csharp/builder/sdkreference/)  * [Bot Builder for Node.js](/en-us/node/builder/overview/)  * Generate your own from the [Connector API Swagger file](https://raw.githubusercontent.com/Microsoft/BotBuilder/master/CSharp/Library/Microsoft.Bot.Connector.Shared/Swagger/ConnectorAPI.json)    ï¿½ 2016 Microsoft
 *
 * OpenAPI spec version: v3
 * Contact: botframework@microsoft.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package client.model;

import com.google.gson.annotations.SerializedName;

import java.util.Objects;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * Payload delivered when completing a payment request
 */
@ApiModel(description = "Payload delivered when completing a payment request")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-08-29T10:06:15.114-07:00")
public class PaymentRequestComplete {
  @SerializedName("id")
  private String id = null;

  @SerializedName("paymentRequest")
  private PaymentRequest paymentRequest = null;

  @SerializedName("paymentResponse")
  private PaymentResponse paymentResponse = null;

  public PaymentRequestComplete id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Payment request ID
   * @return id
  **/
  @ApiModelProperty(value = "Payment request ID")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public PaymentRequestComplete paymentRequest(PaymentRequest paymentRequest) {
    this.paymentRequest = paymentRequest;
    return this;
  }

   /**
   * Initial payment request
   * @return paymentRequest
  **/
  @ApiModelProperty(value = "Initial payment request")
  public PaymentRequest getPaymentRequest() {
    return paymentRequest;
  }

  public void setPaymentRequest(PaymentRequest paymentRequest) {
    this.paymentRequest = paymentRequest;
  }

  public PaymentRequestComplete paymentResponse(PaymentResponse paymentResponse) {
    this.paymentResponse = paymentResponse;
    return this;
  }

   /**
   * Corresponding payment response
   * @return paymentResponse
  **/
  @ApiModelProperty(value = "Corresponding payment response")
  public PaymentResponse getPaymentResponse() {
    return paymentResponse;
  }

  public void setPaymentResponse(PaymentResponse paymentResponse) {
    this.paymentResponse = paymentResponse;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentRequestComplete paymentRequestComplete = (PaymentRequestComplete) o;
    return Objects.equals(this.id, paymentRequestComplete.id) &&
        Objects.equals(this.paymentRequest, paymentRequestComplete.paymentRequest) &&
        Objects.equals(this.paymentResponse, paymentRequestComplete.paymentResponse);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, paymentRequest, paymentResponse);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentRequestComplete {\n");

    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    paymentRequest: ").append(toIndentedString(paymentRequest)).append("\n");
    sb.append("    paymentResponse: ").append(toIndentedString(paymentResponse)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

