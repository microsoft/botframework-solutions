/*
 * Microsoft Bot Connector API - v3.0
 * The Bot Connector REST API allows your bot to send and receive messages to channels configured in the  [Bot Framework Developer Portal](https://dev.botframework.com). The Connector service uses industry-standard REST  and JSON over HTTPS.    Client libraries for this REST API are available. See below for a list.    Many bots will use both the Bot Connector REST API and the associated [Bot State REST API](/en-us/restapi/state). The  Bot State REST API allows a bot to store and retrieve state associated with users and conversations.    Authentication for both the Bot Connector and Bot State REST APIs is accomplished with JWT Bearer tokens, and is  described in detail in the [Connector Authentication](/en-us/restapi/authentication) document.    # Client Libraries for the Bot Connector REST API    * [Bot Builder for C#](/en-us/csharp/builder/sdkreference/)  * [Bot Builder for Node.js](/en-us/node/builder/overview/)  * Generate your own from the [Connector API Swagger file](https://raw.githubusercontent.com/Microsoft/BotBuilder/master/CSharp/Library/Microsoft.Bot.Connector.Shared/Swagger/ConnectorAPI.json)    ï¿½ 2016 Microsoft
 *
 * OpenAPI spec version: v3
 * Contact: botframework@microsoft.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package client.model;

import com.google.gson.annotations.SerializedName;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * A basic card
 */
@ApiModel(description = "A basic card")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-08-29T10:06:15.114-07:00")
public class BasicCard {
  @SerializedName("title")
  private String title = null;

  @SerializedName("subtitle")
  private String subtitle = null;

  @SerializedName("text")
  private String text = null;

  @SerializedName("images")
  private List<CardImage> images = null;

  @SerializedName("buttons")
  private List<CardAction> buttons = null;

  @SerializedName("tap")
  private CardAction tap = null;

  public BasicCard title(String title) {
    this.title = title;
    return this;
  }

   /**
   * Title of the card
   * @return title
  **/
  @ApiModelProperty(value = "Title of the card")
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }

  public BasicCard subtitle(String subtitle) {
    this.subtitle = subtitle;
    return this;
  }

   /**
   * Subtitle of the card
   * @return subtitle
  **/
  @ApiModelProperty(value = "Subtitle of the card")
  public String getSubtitle() {
    return subtitle;
  }

  public void setSubtitle(String subtitle) {
    this.subtitle = subtitle;
  }

  public BasicCard text(String text) {
    this.text = text;
    return this;
  }

   /**
   * Text for the card
   * @return text
  **/
  @ApiModelProperty(value = "Text for the card")
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }

  public BasicCard images(List<CardImage> images) {
    this.images = images;
    return this;
  }

  public BasicCard addImagesItem(CardImage imagesItem) {
    if (this.images == null) {
      this.images = new ArrayList<CardImage>();
    }
    this.images.add(imagesItem);
    return this;
  }

   /**
   * Array of images for the card
   * @return images
  **/
  @ApiModelProperty(value = "Array of images for the card")
  public List<CardImage> getImages() {
    return images;
  }

  public void setImages(List<CardImage> images) {
    this.images = images;
  }

  public BasicCard buttons(List<CardAction> buttons) {
    this.buttons = buttons;
    return this;
  }

  public BasicCard addButtonsItem(CardAction buttonsItem) {
    if (this.buttons == null) {
      this.buttons = new ArrayList<CardAction>();
    }
    this.buttons.add(buttonsItem);
    return this;
  }

   /**
   * Set of actions applicable to the current card
   * @return buttons
  **/
  @ApiModelProperty(value = "Set of actions applicable to the current card")
  public List<CardAction> getButtons() {
    return buttons;
  }

  public void setButtons(List<CardAction> buttons) {
    this.buttons = buttons;
  }

  public BasicCard tap(CardAction tap) {
    this.tap = tap;
    return this;
  }

   /**
   * This action will be activated when user taps on the card itself
   * @return tap
  **/
  @ApiModelProperty(value = "This action will be activated when user taps on the card itself")
  public CardAction getTap() {
    return tap;
  }

  public void setTap(CardAction tap) {
    this.tap = tap;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BasicCard basicCard = (BasicCard) o;
    return Objects.equals(this.title, basicCard.title) &&
        Objects.equals(this.subtitle, basicCard.subtitle) &&
        Objects.equals(this.text, basicCard.text) &&
        Objects.equals(this.images, basicCard.images) &&
        Objects.equals(this.buttons, basicCard.buttons) &&
        Objects.equals(this.tap, basicCard.tap);
  }

  @Override
  public int hashCode() {
    return Objects.hash(title, subtitle, text, images, buttons, tap);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BasicCard {\n");

    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    subtitle: ").append(toIndentedString(subtitle)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    images: ").append(toIndentedString(images)).append("\n");
    sb.append("    buttons: ").append(toIndentedString(buttons)).append("\n");
    sb.append("    tap: ").append(toIndentedString(tap)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

