/*
 * Microsoft Bot Connector API - v3.0
 * The Bot Connector REST API allows your bot to send and receive messages to channels configured in the  [Bot Framework Developer Portal](https://dev.botframework.com). The Connector service uses industry-standard REST  and JSON over HTTPS.    Client libraries for this REST API are available. See below for a list.    Many bots will use both the Bot Connector REST API and the associated [Bot State REST API](/en-us/restapi/state). The  Bot State REST API allows a bot to store and retrieve state associated with users and conversations.    Authentication for both the Bot Connector and Bot State REST APIs is accomplished with JWT Bearer tokens, and is  described in detail in the [Connector Authentication](/en-us/restapi/authentication) document.    # Client Libraries for the Bot Connector REST API    * [Bot Builder for C#](/en-us/csharp/builder/sdkreference/)  * [Bot Builder for Node.js](/en-us/node/builder/overview/)  * Generate your own from the [Connector API Swagger file](https://raw.githubusercontent.com/Microsoft/BotBuilder/master/CSharp/Library/Microsoft.Bot.Connector.Shared/Swagger/ConnectorAPI.json)    ï¿½ 2016 Microsoft
 *
 * OpenAPI spec version: v3
 * Contact: botframework@microsoft.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package client.model;

import com.google.gson.annotations.SerializedName;

import java.util.Objects;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * A clickable action
 */
@ApiModel(description = "A clickable action")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-08-29T10:06:15.114-07:00")
public class CardAction {
  @SerializedName("type")
  private ActionTypes type = null;

  @SerializedName("title")
  private String title = null;

  @SerializedName("image")
  private String image = null;

  @SerializedName("text")
  private String text = null;

  @SerializedName("displayText")
  private String displayText = null;

  @SerializedName("value")
  private Object value = null;

  public CardAction type(ActionTypes type) {
    this.type = type;
    return this;
  }

   /**
   * The type of action implemented by this button
   * @return type
  **/
  @ApiModelProperty(value = "The type of action implemented by this button")
  public ActionTypes getType() {
    return type;
  }

  public void setType(ActionTypes type) {
    this.type = type;
  }

  public CardAction title(String title) {
    this.title = title;
    return this;
  }

   /**
   * Text description which appears on the button
   * @return title
  **/
  @ApiModelProperty(value = "Text description which appears on the button")
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }

  public CardAction image(String image) {
    this.image = image;
    return this;
  }

   /**
   * Image URL which will appear on the button, next to text label
   * @return image
  **/
  @ApiModelProperty(value = "Image URL which will appear on the button, next to text label")
  public String getImage() {
    return image;
  }

  public void setImage(String image) {
    this.image = image;
  }

  public CardAction text(String text) {
    this.text = text;
    return this;
  }

   /**
   * Text for this action
   * @return text
  **/
  @ApiModelProperty(value = "Text for this action")
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }

  public CardAction displayText(String displayText) {
    this.displayText = displayText;
    return this;
  }

   /**
   * (Optional) text to display in the chat feed if the button is clicked
   * @return displayText
  **/
  @ApiModelProperty(value = "(Optional) text to display in the chat feed if the button is clicked")
  public String getDisplayText() {
    return displayText;
  }

  public void setDisplayText(String displayText) {
    this.displayText = displayText;
  }

  public CardAction value(Object value) {
    this.value = value;
    return this;
  }

   /**
   * Supplementary parameter for action. Content of this property depends on the ActionType
   * @return value
  **/
  @ApiModelProperty(value = "Supplementary parameter for action. Content of this property depends on the ActionType")
  public Object getValue() {
    return value;
  }

  public void setValue(Object value) {
    this.value = value;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CardAction cardAction = (CardAction) o;
    return Objects.equals(this.type, cardAction.type) &&
        Objects.equals(this.title, cardAction.title) &&
        Objects.equals(this.image, cardAction.image) &&
        Objects.equals(this.text, cardAction.text) &&
        Objects.equals(this.displayText, cardAction.displayText) &&
        Objects.equals(this.value, cardAction.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, title, image, text, displayText, value);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CardAction {\n");

    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    displayText: ").append(toIndentedString(displayText)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

