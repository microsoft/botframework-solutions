/*
 * Microsoft Bot Connector API - v3.0
 * The Bot Connector REST API allows your bot to send and receive messages to channels configured in the  [Bot Framework Developer Portal](https://dev.botframework.com). The Connector service uses industry-standard REST  and JSON over HTTPS.    Client libraries for this REST API are available. See below for a list.    Many bots will use both the Bot Connector REST API and the associated [Bot State REST API](/en-us/restapi/state). The  Bot State REST API allows a bot to store and retrieve state associated with users and conversations.    Authentication for both the Bot Connector and Bot State REST APIs is accomplished with JWT Bearer tokens, and is  described in detail in the [Connector Authentication](/en-us/restapi/authentication) document.    # Client Libraries for the Bot Connector REST API    * [Bot Builder for C#](/en-us/csharp/builder/sdkreference/)  * [Bot Builder for Node.js](/en-us/node/builder/overview/)  * Generate your own from the [Connector API Swagger file](https://raw.githubusercontent.com/Microsoft/BotBuilder/master/CSharp/Library/Microsoft.Bot.Connector.Shared/Swagger/ConnectorAPI.json)    ï¿½ 2016 Microsoft
 *
 * OpenAPI spec version: v3
 * Contact: botframework@microsoft.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package client.model;

import com.google.gson.annotations.SerializedName;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * Provides information about the requested transaction
 */
@ApiModel(description = "Provides information about the requested transaction")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-08-29T10:06:15.114-07:00")
public class PaymentDetails {
  @SerializedName("total")
  private PaymentItem total = null;

  @SerializedName("displayItems")
  private List<PaymentItem> displayItems = null;

  @SerializedName("shippingOptions")
  private List<PaymentShippingOption> shippingOptions = null;

  @SerializedName("modifiers")
  private List<PaymentDetailsModifier> modifiers = null;

  @SerializedName("error")
  private String error = null;

  public PaymentDetails total(PaymentItem total) {
    this.total = total;
    return this;
  }

   /**
   * Contains the total amount of the payment request
   * @return total
  **/
  @ApiModelProperty(value = "Contains the total amount of the payment request")
  public PaymentItem getTotal() {
    return total;
  }

  public void setTotal(PaymentItem total) {
    this.total = total;
  }

  public PaymentDetails displayItems(List<PaymentItem> displayItems) {
    this.displayItems = displayItems;
    return this;
  }

  public PaymentDetails addDisplayItemsItem(PaymentItem displayItemsItem) {
    if (this.displayItems == null) {
      this.displayItems = new ArrayList<PaymentItem>();
    }
    this.displayItems.add(displayItemsItem);
    return this;
  }

   /**
   * Contains line items for the payment request that the user agent may display
   * @return displayItems
  **/
  @ApiModelProperty(value = "Contains line items for the payment request that the user agent may display")
  public List<PaymentItem> getDisplayItems() {
    return displayItems;
  }

  public void setDisplayItems(List<PaymentItem> displayItems) {
    this.displayItems = displayItems;
  }

  public PaymentDetails shippingOptions(List<PaymentShippingOption> shippingOptions) {
    this.shippingOptions = shippingOptions;
    return this;
  }

  public PaymentDetails addShippingOptionsItem(PaymentShippingOption shippingOptionsItem) {
    if (this.shippingOptions == null) {
      this.shippingOptions = new ArrayList<PaymentShippingOption>();
    }
    this.shippingOptions.add(shippingOptionsItem);
    return this;
  }

   /**
   * A sequence containing the different shipping options for the user to choose from
   * @return shippingOptions
  **/
  @ApiModelProperty(value = "A sequence containing the different shipping options for the user to choose from")
  public List<PaymentShippingOption> getShippingOptions() {
    return shippingOptions;
  }

  public void setShippingOptions(List<PaymentShippingOption> shippingOptions) {
    this.shippingOptions = shippingOptions;
  }

  public PaymentDetails modifiers(List<PaymentDetailsModifier> modifiers) {
    this.modifiers = modifiers;
    return this;
  }

  public PaymentDetails addModifiersItem(PaymentDetailsModifier modifiersItem) {
    if (this.modifiers == null) {
      this.modifiers = new ArrayList<PaymentDetailsModifier>();
    }
    this.modifiers.add(modifiersItem);
    return this;
  }

   /**
   * Contains modifiers for particular payment method identifiers
   * @return modifiers
  **/
  @ApiModelProperty(value = "Contains modifiers for particular payment method identifiers")
  public List<PaymentDetailsModifier> getModifiers() {
    return modifiers;
  }

  public void setModifiers(List<PaymentDetailsModifier> modifiers) {
    this.modifiers = modifiers;
  }

  public PaymentDetails error(String error) {
    this.error = error;
    return this;
  }

   /**
   * Error description
   * @return error
  **/
  @ApiModelProperty(value = "Error description")
  public String getError() {
    return error;
  }

  public void setError(String error) {
    this.error = error;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentDetails paymentDetails = (PaymentDetails) o;
    return Objects.equals(this.total, paymentDetails.total) &&
        Objects.equals(this.displayItems, paymentDetails.displayItems) &&
        Objects.equals(this.shippingOptions, paymentDetails.shippingOptions) &&
        Objects.equals(this.modifiers, paymentDetails.modifiers) &&
        Objects.equals(this.error, paymentDetails.error);
  }

  @Override
  public int hashCode() {
    return Objects.hash(total, displayItems, shippingOptions, modifiers, error);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentDetails {\n");

    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    displayItems: ").append(toIndentedString(displayItems)).append("\n");
    sb.append("    shippingOptions: ").append(toIndentedString(shippingOptions)).append("\n");
    sb.append("    modifiers: ").append(toIndentedString(modifiers)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

