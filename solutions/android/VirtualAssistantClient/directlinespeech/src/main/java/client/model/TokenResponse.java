/*
 * Microsoft Bot Connector API - v3.0
 * The Bot Connector REST API allows your bot to send and receive messages to channels configured in the  [Bot Framework Developer Portal](https://dev.botframework.com). The Connector service uses industry-standard REST  and JSON over HTTPS.    Client libraries for this REST API are available. See below for a list.    Many bots will use both the Bot Connector REST API and the associated [Bot State REST API](/en-us/restapi/state). The  Bot State REST API allows a bot to store and retrieve state associated with users and conversations.    Authentication for both the Bot Connector and Bot State REST APIs is accomplished with JWT Bearer tokens, and is  described in detail in the [Connector Authentication](/en-us/restapi/authentication) document.    # Client Libraries for the Bot Connector REST API    * [Bot Builder for C#](/en-us/csharp/builder/sdkreference/)  * [Bot Builder for Node.js](/en-us/node/builder/overview/)  * Generate your own from the [Connector API Swagger file](https://raw.githubusercontent.com/Microsoft/BotBuilder/master/CSharp/Library/Microsoft.Bot.Connector.Shared/Swagger/ConnectorAPI.json)    ï¿½ 2016 Microsoft
 *
 * OpenAPI spec version: v3
 * Contact: botframework@microsoft.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package client.model;

import com.google.gson.annotations.SerializedName;

import java.util.Objects;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * A response that includes a user token
 */
@ApiModel(description = "A response that includes a user token")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-08-29T10:06:15.114-07:00")
public class TokenResponse {
  @SerializedName("connectionName")
  private String connectionName = null;

  @SerializedName("token")
  private String token = null;

  @SerializedName("expiration")
  private String expiration = null;

  public TokenResponse connectionName(String connectionName) {
    this.connectionName = connectionName;
    return this;
  }

   /**
   * The connection name
   * @return connectionName
  **/
  @ApiModelProperty(value = "The connection name")
  public String getConnectionName() {
    return connectionName;
  }

  public void setConnectionName(String connectionName) {
    this.connectionName = connectionName;
  }

  public TokenResponse token(String token) {
    this.token = token;
    return this;
  }

   /**
   * The user token
   * @return token
  **/
  @ApiModelProperty(value = "The user token")
  public String getToken() {
    return token;
  }

  public void setToken(String token) {
    this.token = token;
  }

  public TokenResponse expiration(String expiration) {
    this.expiration = expiration;
    return this;
  }

   /**
   * Expiration for the token, in ISO 8601 format (e.g. \&quot;2007-04-05T14:30Z\&quot;)
   * @return expiration
  **/
  @ApiModelProperty(value = "Expiration for the token, in ISO 8601 format (e.g. \"2007-04-05T14:30Z\")")
  public String getExpiration() {
    return expiration;
  }

  public void setExpiration(String expiration) {
    this.expiration = expiration;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TokenResponse tokenResponse = (TokenResponse) o;
    return Objects.equals(this.connectionName, tokenResponse.connectionName) &&
        Objects.equals(this.token, tokenResponse.token) &&
        Objects.equals(this.expiration, tokenResponse.expiration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(connectionName, token, expiration);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TokenResponse {\n");

    sb.append("    connectionName: ").append(toIndentedString(connectionName)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    expiration: ").append(toIndentedString(expiration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

