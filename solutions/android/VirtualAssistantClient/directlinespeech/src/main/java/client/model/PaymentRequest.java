/*
 * Microsoft Bot Connector API - v3.0
 * The Bot Connector REST API allows your bot to send and receive messages to channels configured in the  [Bot Framework Developer Portal](https://dev.botframework.com). The Connector service uses industry-standard REST  and JSON over HTTPS.    Client libraries for this REST API are available. See below for a list.    Many bots will use both the Bot Connector REST API and the associated [Bot State REST API](/en-us/restapi/state). The  Bot State REST API allows a bot to store and retrieve state associated with users and conversations.    Authentication for both the Bot Connector and Bot State REST APIs is accomplished with JWT Bearer tokens, and is  described in detail in the [Connector Authentication](/en-us/restapi/authentication) document.    # Client Libraries for the Bot Connector REST API    * [Bot Builder for C#](/en-us/csharp/builder/sdkreference/)  * [Bot Builder for Node.js](/en-us/node/builder/overview/)  * Generate your own from the [Connector API Swagger file](https://raw.githubusercontent.com/Microsoft/BotBuilder/master/CSharp/Library/Microsoft.Bot.Connector.Shared/Swagger/ConnectorAPI.json)    ï¿½ 2016 Microsoft
 *
 * OpenAPI spec version: v3
 * Contact: botframework@microsoft.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package client.model;

import com.google.gson.annotations.SerializedName;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * A request to make a payment
 */
@ApiModel(description = "A request to make a payment")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-08-29T10:06:15.114-07:00")
public class PaymentRequest {
  @SerializedName("id")
  private String id = null;

  @SerializedName("methodData")
  private List<PaymentMethodData> methodData = null;

  @SerializedName("details")
  private PaymentDetails details = null;

  @SerializedName("options")
  private PaymentOptions options = null;

  @SerializedName("expires")
  private String expires = null;

  public PaymentRequest id(String id) {
    this.id = id;
    return this;
  }

   /**
   * ID of this payment request
   * @return id
  **/
  @ApiModelProperty(value = "ID of this payment request")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public PaymentRequest methodData(List<PaymentMethodData> methodData) {
    this.methodData = methodData;
    return this;
  }

  public PaymentRequest addMethodDataItem(PaymentMethodData methodDataItem) {
    if (this.methodData == null) {
      this.methodData = new ArrayList<PaymentMethodData>();
    }
    this.methodData.add(methodDataItem);
    return this;
  }

   /**
   * Allowed payment methods for this request
   * @return methodData
  **/
  @ApiModelProperty(value = "Allowed payment methods for this request")
  public List<PaymentMethodData> getMethodData() {
    return methodData;
  }

  public void setMethodData(List<PaymentMethodData> methodData) {
    this.methodData = methodData;
  }

  public PaymentRequest details(PaymentDetails details) {
    this.details = details;
    return this;
  }

   /**
   * Details for this request
   * @return details
  **/
  @ApiModelProperty(value = "Details for this request")
  public PaymentDetails getDetails() {
    return details;
  }

  public void setDetails(PaymentDetails details) {
    this.details = details;
  }

  public PaymentRequest options(PaymentOptions options) {
    this.options = options;
    return this;
  }

   /**
   * Provides information about the options desired for the payment request
   * @return options
  **/
  @ApiModelProperty(value = "Provides information about the options desired for the payment request")
  public PaymentOptions getOptions() {
    return options;
  }

  public void setOptions(PaymentOptions options) {
    this.options = options;
  }

  public PaymentRequest expires(String expires) {
    this.expires = expires;
    return this;
  }

   /**
   * Expiration for this request, in ISO 8601 duration format (e.g., &#39;P1D&#39;)
   * @return expires
  **/
  @ApiModelProperty(value = "Expiration for this request, in ISO 8601 duration format (e.g., 'P1D')")
  public String getExpires() {
    return expires;
  }

  public void setExpires(String expires) {
    this.expires = expires;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentRequest paymentRequest = (PaymentRequest) o;
    return Objects.equals(this.id, paymentRequest.id) &&
        Objects.equals(this.methodData, paymentRequest.methodData) &&
        Objects.equals(this.details, paymentRequest.details) &&
        Objects.equals(this.options, paymentRequest.options) &&
        Objects.equals(this.expires, paymentRequest.expires);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, methodData, details, options, expires);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentRequest {\n");

    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    methodData: ").append(toIndentedString(methodData)).append("\n");
    sb.append("    details: ").append(toIndentedString(details)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    expires: ").append(toIndentedString(expires)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

