[import](ShowToDoTexts.lg)
[import](../Shared/Card.lg)

# AskAddOrCompleteTaskMessage
[Activity
    Text = @{AskAddOrCompleteTaskMessage.Text()}
    Speak = @{AskAddOrCompleteTaskMessage.Text()}
    InputHint = ignoringInput
]

# ReadMoreTasksPrompt
[Activity
    Text = @{ReadMoreTasksPrompt.Text()}
    Speak = @{ReadMoreTasksPrompt.Text()}
    InputHint = expectingInput
]

# ReadMoreTasksConfirmFailed
[Activity
    Text = @{ReadMoreTasksConfirmFailed.Text()}
    Speak = @{ReadMoreTasksConfirmFailed.Text()}
    InputHint = expectingInput
]

# ReadMoreTasksPrompt2
[Activity
    Text = @{ReadMoreTasksPrompt2.Text()}
    Speak = @{ReadMoreTasksPrompt2.Text()}
    InputHint = expectingInput
]

# RetryReadMoreTasksPrompt2
[Activity
    Text = @{RetryReadMoreTasksPrompt2.Text()}
    Speak = @{RetryReadMoreTasksPrompt2.Text()}
    InputHint = expectingInput
]

# NoTasksMessage
[Activity
    Text = @{NoTasksMessage.Text(ListType)}
    Speak = @{NoTasksMessage.Text(ListType)}
    InputHint = acceptingInput
]

# TaskSummaryMessage
[Activity
    Text = @{TaskSummaryMessage.Text(TaskCount, ListType)}
    Speak = @{TaskSummaryMessage.Text(TaskCount, ListType)}
    InputHint = ignoringInput
]

# RepeatFirstPagePrompt
[Activity
    Text = @{RepeatFirstPagePrompt.Text(TaskCount, ListType)}
    Speak = @{RepeatFirstPagePrompt.Text(TaskCount, ListType)}
    InputHint = expectingInput
]

# RepeatFirstPageConfirmFailed
[Activity
    Text = @{RepeatFirstPageConfirmFailed.Text(TaskCount)}
    Speak = @{RepeatFirstPageConfirmFailed.Text(TaskCount)}
    InputHint = expectingInput
]

# GoBackToStartPromptForSingleTask
[Activity
    Text = @{GoBackToStartPromptForSingleTask.Text(TaskCount, ListType)}
    Speak = @{GoBackToStartPromptForSingleTask.Text(TaskCount, ListType)}
    InputHint = expectingInput
]

# GoBackToStartForSingleTaskConfirmFailed
[Activity
    Text = @{GoBackToStartForSingleTaskConfirmFailed.Text(TaskCount)}
    Speak = @{GoBackToStartForSingleTaskConfirmFailed.Text(TaskCount)}
    InputHint = expectingInput
]

# GoBackToStartPromptForTasks
[Activity
    Text = @{GoBackToStartPromptForTasks.Text(TaskCount, ListType)}
    Speak = @{GoBackToStartPromptForTasks.Text(TaskCount, ListType)}
    InputHint = expectingInput
]

# GoBackToStartForTasksConfirmFailed
[Activity
    Text = @{GoBackToStartForTasksConfirmFailed.Text(TaskCount)}
    Speak = @{GoBackToStartForTasksConfirmFailed.Text(TaskCount)}
    InputHint = expectingInput
]

# ShowToDo
[Activity
    Text = @{ShowToDoText(AllTasksCount, ListType, ToDos)}
    Speak = @{ShowToDoText(AllTasksCount, ListType, ToDos)}
    Attachments = @{json(ShowToDoCard(Title, TotalNumber, ToDos, UseFile, CheckIconUrl, UnCheckIconUrl))}
    InputHint = ignoringInput
]

# CardSummary(AllTasksCount, ListType, ToDos)
- IF: @{AllTasksCount == 1}
  - @{CardSummaryMessageForSingleTask.Text(ListType)}
- ELSE:
  - @{CardSummaryMessageForMultipleTasks.Text(AllTasksCount, ListType, ToDos)}

# ShowToDoTextForSinglePage(ToDos)
- IF: @{count(ToDos) == 1}
  - @{LatestTask.Text()}
- ELSE:
  - @{LatestTasks.Text()}

# ShowToDoTextForMultiPage(AllTasksCount, ListType, ToDos)
- @{CardSummary(AllTasksCount, ListType, ToDos)}

# ShowToDoText(AllTasksCount, ListType, ToDos)
- IF: @{AllTasksCount <= count(ToDos)}
  - @{ShowToDoTextForSinglePage(ToDos)}
- ELSE:
  - @{ShowToDoTextForMultiPage(AllTasksCount, ListType, ToDos)}

# ReadMore
[Activity
    Text = @{ReadMoreText(ToDos)}
    Speak = @{ReadMoreText(ToDos)}
    Attachments = @{json(ShowToDoCard(Title, TotalNumber, ToDos, UseFile, CheckIconUrl, UnCheckIconUrl))}
    InputHint = ignoringInput
]

# ReadMoreText(ToDos)
- IF: @{count(ToDos) == 1}
  - @{NextTask.Text()}
- ELSE:
  - @{NextTasks.Text()}

# PreviousPage
[Activity
    Text = @{PreviousPageText(ToDos)}
    Speak = @{PreviousPageText(ToDos)}
    Attachments = @{json(ShowToDoCard(Title, TotalNumber, ToDos, UseFile, CheckIconUrl, UnCheckIconUrl))}
    InputHint = ignoringInput
]

# PreviousPageText(ToDos)
- IF: @{isFirst == false}
  - @{PreviousTasks.Text()}
- ELSEIF: @{count(ToDos) == 1}
  - @{PreviousFirstSingleTask.Text(taskCount)}
- ELSE:
  - @{PreviousFirstTasks.Text(taskCount)}
